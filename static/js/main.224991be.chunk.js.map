{"version":3,"sources":["Nav.js","CategoryList.js","ProductList.js","App.js","serviceWorker.js","index.js"],"names":["Nav","Component","CategoryList","state","categories","getCategories","fetch","then","response","json","data","setState","this","props","info","title","ListGroup","map","category","ListGroupItem","onClick","changeCategory","key","id","categoryName","currentCategory","ProductList","name","currentCategoryName","ıd","currentIdProduct","Table","products","product","scope","productName","quantityPerUnit","unitsInStock","unitPrice","App","currentProducts","getProducts","Container","Row","Col","xs","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"2MAEqBA,E,uKAEb,OACI,6BACI,iD,GAJiBC,a,gBCCZC,E,4MACnBC,MAAQ,CACNC,WAAY,I,EAOdC,cAAgB,WACdC,MAAM,oCACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAU,EAAKC,SAAS,CAAEP,WAAYM,Q,kEAN9CE,KAAKP,kB,+BASG,IAAD,OACP,OACE,6BACE,4BAAKO,KAAKC,MAAMC,KAAKC,OACrB,kBAACC,EAAA,EAAD,KACGJ,KAAKT,MAAMC,WAAWa,KAAI,SAACC,GAAD,OACzB,kBAACC,EAAA,EAAD,CACEC,QAAS,kBAAM,EAAKP,MAAMQ,eAAeH,IACzCI,IAAKJ,EAASK,IAEbL,EAASM,kBAIhB,4BAAKZ,KAAKC,MAAMY,sB,GA7BkBxB,a,QCArByB,E,uKAEjB,OACE,6BACE,4BAAKd,KAAKC,MAAMC,KAAKC,OACrB,4BACGH,KAAKC,MAAMC,KAAKa,KADnB,IAC0Bf,KAAKC,MAAMe,qBAErC,4BACGhB,KAAKC,MAAMC,KAAKe,QADnB,IACwBjB,KAAKC,MAAMiB,kBAEnC,kBAACC,EAAA,EAAD,KACE,+BACE,4BACE,kCACA,4CACA,iDACA,6CACA,uCAGJ,+BACGnB,KAAKC,MAAMmB,SAASf,KAAI,SAACgB,GAAD,OACvB,wBAAIX,IAAKW,EAAQV,IACf,wBAAIW,MAAM,OAAOD,EAAQV,IACzB,4BAAKU,EAAQE,aACb,4BAAKF,EAAQG,iBACb,4BAAKH,EAAQI,cACb,4BAAKJ,EAAQK,UAAb,gB,GA5ByBrC,a,wBCGpBsC,E,4MACnBpC,MAAQ,CACNsB,gBAAiB,GACjBe,gBAAiB,GACjBZ,oBAAqB,GACrBI,SAAU,I,EAIZX,eAAiB,SAACH,GAChB,EAAKP,SAAS,CAAE6B,gBAAiBtB,EAASK,KAC1C,EAAKZ,SAAS,CAAEiB,oBAAqBV,EAASM,gB,EAOhDiB,YAAc,WACZnC,MAAM,kCACHC,MAAK,SAACG,GAAD,OAAUA,EAAKD,UACpBF,MAAK,SAACG,GAAD,OAAU,EAAKC,SAAS,CAAEqB,SAAUtB,Q,kEAN5CE,KAAK6B,gB,+BAgBL,OACE,6BACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,OAEF,kBAACA,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACN,kBAAC,EAAD,CACEpB,gBAAiBb,KAAKT,MAAMsB,gBAC5BJ,eAAgBT,KAAKS,eACrBP,KAZO,CAAEC,MAAO,oBAepB,kBAAC6B,EAAA,EAAD,CAAKC,GAAG,KACN,kBAAC,EAAD,CACEb,SAAUpB,KAAKT,MAAM6B,SACrBJ,oBAAqBhB,KAAKT,MAAMyB,oBAChCE,iBAAkBlB,KAAKT,MAAMqC,gBAC7B1B,KAzBM,CAChBC,MAAO,eACPY,KAAM,kBACNE,UAAI,2B,GA5BuB5B,aCMb6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnD,MAAK,SAAAoD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.224991be.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class Nav extends Component {\n    render() {\n        return (\n            <div>\n                <h1>navigatinoon</h1>\n            </div>\n        )\n    }\n}\n","import React, { Component } from \"react\";\nimport { ListGroup, ListGroupItem, Alert } from \"reactstrap\";\n\nexport default class CategoryList extends Component {\n  state = {\n    categories: [],\n  };\n\n  componentDidMount(){\n    this.getCategories()\n  }\n\n  getCategories = () => {\n    fetch(\"http://localhost:8080/categories\")\n      .then((response) => response.json())\n      .then((data) => this.setState({ categories: data }));\n  };\n\n  render() {\n    return (\n      <div>\n        <h3>{this.props.info.title}</h3>\n        <ListGroup>\n          {this.state.categories.map((category) => (\n            <ListGroupItem\n              onClick={() => this.props.changeCategory(category)}\n              key={category.id}\n            >\n              {category.categoryName}\n            </ListGroupItem>\n          ))}\n        </ListGroup>\n        <h4>{this.props.currentCategory}</h4>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Table } from \"reactstrap\";\n\nexport default class ProductList extends Component {\n  render() {\n    return (\n      <div>\n        <h1>{this.props.info.title}</h1>\n        <h3>\n          {this.props.info.name} {this.props.currentCategoryName}\n        </h3>\n        <h3>\n          {this.props.info.ıd} {this.props.currentIdProduct}\n        </h3>\n        <Table>\n          <thead>\n            <tr>\n              <th>Id</th>\n              <th>Product Name</th>\n              <th>Quantity Per Unit</th>\n              <th>Unit In Stock</th>\n              <th>Price</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.props.products.map((product) => (\n              <tr key={product.id}>\n                <th scope=\"row\">{product.id}</th>\n                <td>{product.productName}</td>\n                <td>{product.quantityPerUnit}</td>\n                <td>{product.unitsInStock}</td>\n                <td>{product.unitPrice}$</td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Nav from \"./Nav\";\nimport CategoryList from \"./CategoryList\";\nimport ProductList from \"./ProductList\";\nimport { Container, Row, Col } from \"reactstrap\";\n\nexport default class App extends Component {\n  state = {\n    currentCategory: \"\",\n    currentProducts: \"\",\n    currentCategoryName: \"\",\n    products: [],\n    \n  };\n\n  changeCategory = (category) => {\n    this.setState({ currentProducts: category.id });\n    this.setState({ currentCategoryName: category.categoryName });\n  };\n\n  componentDidMount() {\n    this.getProducts();\n  }\n\n  getProducts = () => {\n    fetch(\"http://localhost:8080/products\")\n      .then((data) => data.json())\n      .then((data) => this.setState({ products: data }));\n  };\n\n  render() {\n    let productInfo = {\n      title: \"Product List\",\n      name: \"Category Name: \",\n      ıd: \"Category Id: \",\n    };\n    let categoryInfo = { title: \"Category List\" };\n    return (\n      <div>\n        <Container>\n          <Row>\n            <Nav />\n          </Row>\n          <Row>\n            <Col xs=\"3\">\n              <CategoryList\n                currentCategory={this.state.currentCategory}\n                changeCategory={this.changeCategory}\n                info={categoryInfo}\n              />\n            </Col>\n            <Col xs=\"9\">\n              <ProductList\n                products={this.state.products}\n                currentCategoryName={this.state.currentCategoryName}\n                currentIdProduct={this.state.currentProducts}\n                info={productInfo}\n              />\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}